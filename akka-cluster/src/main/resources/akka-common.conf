akka {

  event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]

  loggers = ["akka.event.slf4j.Slf4jLogger"]

  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "INFO"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "INFO"

  actor {

    provider = "akka.cluster.ClusterActorRefProvider"

    serializers {
      java = "akka.serialization.JavaSerializer"
    }

    serialization-bindings {
      "com.akka.tutorials.core.ClusterMessages" = java
      "com.akka.tutorials.dto.CrdtMessage" = java
    }

    default-dispatcher.throughput = 1

    deployment {
      /ping {
        router = round-robin-pool
        cluster {
          enabled = on
          use-role = "akka-java-tutorials-node"
        }
      }

    }
  }

  remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      #hostname = "127.0.0.1"
      port = 0
    }
    log-remote-lifecycle-events = off
  }

  cluster {
    roles = ["akka-java-tutorials-node"]
    retry-unsuccessful-join-after = 4s
    auto-down-unreachable-after = 3s # this doesn't work

    use-dispatcher = cluster-dispatcher

    failure-detector {

      # How often keep-alive heartbeat messages should be sent to each connection.
      heartbeat-interval = 2s

      # Minimum standard deviation to use for the normal distribution in
      # AccrualFailureDetector. Too low standard deviation might result in
      # too much sensitivity for sudden, but normal, deviations in heartbeat
      # inter arrival times.
      min-std-deviation = 500ms

      # Defines the failure detector threshold.
      # A low threshold is prone to generate many wrong suspicions but ensures
      # a quick detection in the event of a real crash. Conversely, a high
      # threshold generates fewer mistakes but needs more time to detect
      # actual crashes.
      threshold = 8.0

      # Number of potentially lost/delayed heartbeats that will be
      # accepted before considering it to be an anomaly.
      # This margin is important to be able to survive sudden, occasional,
      # pauses in heartbeat arrivals, due to for example garbage collect or
      # network drop.
      acceptable-heartbeat-pause = 4s


      # ========
      # Number of member nodes that each member will send heartbeat messages to,
      # i.e. each node will be monitored by this number of other nodes.
      # monitored-by-nr-of-members = 4

      # After the heartbeat request has been sent the first failure detection
      # will start after this period, even though no heartbeat mesage has
      # been received.
      # expected-response-after = 10s
    }

  }

}

cluster-dispatcher {
  type = "Dispatcher"
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 1
    parallelism-max = 1
  }
}

